/*!
 * hy-ui v0.0.4
 * @license (c) 2018-2020 Hyhello
 * Released under the MIT License.
 */
(function(l, r) {
	if (l.getElementById('livereloadscript')) return;
	r = l.createElement('script');
	r.async = 1;
	r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1';
	r.id = 'livereloadscript';
	l.head.appendChild(r);
})(window.document);
var HyUi = (function() {
	'use strict';

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, {
				value: value,
				enumerable: true,
				configurable: true,
				writable: true
			});
		} else {
			obj[key] = value;
		}

		return obj;
	}

	function ownKeys(object, enumerableOnly) {
		var keys = Object.keys(object);

		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			if (enumerableOnly)
				symbols = symbols.filter(function(sym) {
					return Object.getOwnPropertyDescriptor(object, sym).enumerable;
				});
			keys.push.apply(keys, symbols);
		}

		return keys;
	}

	function _objectSpread2(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i] != null ? arguments[i] : {};

			if (i % 2) {
				ownKeys(source, true).forEach(function(key) {
					_defineProperty(target, key, source[key]);
				});
			} else if (Object.getOwnPropertyDescriptors) {
				Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
			} else {
				ownKeys(source).forEach(function(key) {
					Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
				});
			}
		}

		return target;
	}

	/**
	 * 作者：Hyhello
	 * 时间：2019-10-07
	 * 描述：icon
	 */
	var CLASS_PREFIX = 'hy-icon';
	var Icon = {
		name: 'hyIcon',
		props: {
			type: {
				type: String,
				default: ''
			}
		},
		render: function render(h) {
			return h('span', {
				class: [''.concat(CLASS_PREFIX, '-').concat(this.type)]
			});
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-12-29
	 * 描述：affix
	 */
	var Affix = {
		name: 'Affix',
		props: {
			tag: {
				type: String,
				default: 'span'
			}
		},
		render: function render(h) {
			return h(this.tag, this.$slots.default);
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-06-23
	 * 描述：常量
	 */
	var class2type = Object.freeze({});
	var _toString = class2type.toString;
	var _hasOwn = class2type.hasOwnProperty;
	var noop = function noop() {};

	var _arguments = arguments;

	var oneOf = function oneOf(target, list) {
		return list.some(function(item) {
			return item === target;
		});
	}; // 继承

	var _typeof = function _typeof(type) {
		return _toString
			.call(type)
			.slice(8, -1)
			.toLowerCase();
	}; // 判断是否是基本类型

	var isPrimitive = function isPrimitive(n) {
		return n !== Object(n);
	}; // 判断是否是数组

	var isArray =
		Array.isArray ||
		function(n) {
			return n instanceof Array;
		}; // 是否添加px

	var maybeAddPx = function maybeAddPx(n) {
		// eslint-disable-next-line no-restricted-globals
		return isNaN(+n) ? n : ''.concat(n, 'px');
	}; // likeArray

	/**
	 * 作者：Hyhello
	 * 时间：2020-01-10
	 * 描述：头部
	 */
	var CLASS_PREFIX$1 = 'hy-avatar';
	var SIZE_LIST = ['large', 'medium', 'small'];
	var SHAPE_LIST = ['circle', 'square'];
	var Avatar = {
		name: 'hyAvatar',
		props: {
			shape: {
				type: String,
				default: 'circle',
				validator: function validator(val) {
					return oneOf(val, SHAPE_LIST);
				}
			},
			size: {
				type: [String, Number],
				default: 'large',
				validator: function validator(val) {
					return oneOf(val, SIZE_LIST) || _typeof(val) === 'number';
				}
			},
			icon: {
				type: String,
				default: ''
			},
			src: {
				type: String,
				default: ''
			},
			srcSet: {
				type: String,
				default: ''
			},
			alt: {
				type: String,
				default: ''
			},
			onError: {
				type: Function,
				default: noop
			}
		},
		data: function data() {
			return {
				isImgExist: true
			};
		},
		computed: {
			classes: function classes() {
				var list = [CLASS_PREFIX$1];
				var shape = this.shape,
					size = this.size,
					icon = this.icon,
					src = this.src;

				if (size && _typeof(size) === 'string') {
					list.push(''.concat(CLASS_PREFIX$1, '--').concat(size));
				}

				if (shape) {
					list.push(''.concat(CLASS_PREFIX$1, '--').concat(shape));
				}

				if (src) {
					list.push(''.concat(CLASS_PREFIX$1, '--image'));
				}

				if (icon) {
					list.push(''.concat(CLASS_PREFIX$1, '--icon'));
				}

				return list;
			},
			styles: function styles() {
				var size = this.size;

				if (_typeof(size) === 'number') {
					return {
						width: maybeAddPx(size),
						height: maybeAddPx(size),
						lineHeight: maybeAddPx(size)
					};
				}

				return {};
			}
		},
		methods: {
			handlerError: function handlerError() {
				var onError = this.onError;
				var flag = onError ? onError() : undefined;

				if (flag !== false) {
					this.isImgExist = false;
				}
			},
			renderAvatar: function renderAvatar() {
				var h = this.$createElement;
				var icon = this.icon,
					src = this.src,
					alt = this.alt,
					srcSet = this.srcSet,
					isImgExist = this.isImgExist,
					handlerError = this.handlerError;

				if (isImgExist && src) {
					return h('img', {
						on: {
							error: handlerError
						},
						attrs: {
							src: src,
							alt: alt,
							srcSet: srcSet
						}
					});
				}

				if (icon) {
					return h('hy-icon', {
						props: {
							type: icon
						}
					});
				}

				return this.$slots.default;
			}
		},
		render: function render(h) {
			var classes = this.classes,
				styles = this.styles;
			return h(
				'span',
				{
					class: classes,
					style: styles
				},
				[this.renderAvatar()]
			);
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-10-07
	 * 描述：button
	 */
	var CLASS_PREFIX$2 = 'hy-button';
	var TYPE_LIST = ['primary', 'success', 'warning', 'danger', 'info', 'text', ''];
	var NATIVE_TYPE_LIST = ['button', 'submit', 'reset'];
	var SIZE_LIST$1 = ['large', 'medium', 'small'];
	var SHAPE_LIST$1 = ['normal', 'round', 'circle'];
	var Button = {
		name: 'hyButton',
		props: {
			disabled: {
				type: Boolean,
				default: false
			},
			icon: {
				type: String,
				default: ''
			},
			size: {
				type: String,
				default: 'large',
				validator: function validator(val) {
					return oneOf(val, SIZE_LIST$1);
				}
			},
			shape: {
				type: String,
				default: 'normal',
				validator: function validator(val) {
					return oneOf(val, SHAPE_LIST$1);
				}
			},
			type: {
				type: String,
				default: '',
				validator: function validator(val) {
					return oneOf(val, TYPE_LIST);
				}
			},
			nativeType: {
				type: String,
				default: 'button',
				validator: function validator(val) {
					return oneOf(val, NATIVE_TYPE_LIST);
				}
			}
		},
		render: function render(h) {
			return h('button', {
				class: CLASS_PREFIX$2,
				attrs: {
					'aria-label': 'button',
					rule: 'button'
				}
			});
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-07-13
	 * 描述：debug
	 */
	var warn = function warn(msg) {
		console.error('[hy-ui warn]\uFF1A'.concat(msg));
	};

	var CLASS_PREFIX$3 = 'hy-skeleton'; // 默认配置

	var _DEFALUT = {
		titleWidth: '38%',
		//
		graph: {
			rows: 3,
			// number
			width: '61%' // number | string | Array<number | string>
		},
		avatar: {
			size: 'small',
			//  large / medium / small
			shape: 'circle' // 'circle', 'square'
		}
	};
	var SHAPE_LIST$2 = ['circle', 'square'];
	var SIZE_LIST$2 = ['large', 'medium', 'small'];
	var Skeleton = {
		name: 'hySkeleton',
		props: {
			loading: {
				type: Boolean,
				default: false
			},
			// 是否展示标题占位符
			title: {
				type: [Boolean, String, Number],
				default: true
			},
			// 是否显示头像
			avatar: {
				type: [Boolean, Object],
				default: false
			},
			// 是否显示动画
			active: {
				type: Boolean,
				default: false
			},
			// 是否显示段落占位图
			graph: {
				type: [Boolean, Object],
				default: false
			}
		},
		computed: {
			rowProp: function rowProp() {
				var graph = this.graph;

				if (_typeof(graph) === 'boolean') {
					return graph ? ['', '', _DEFALUT.graph.width] : [];
				}

				if (_typeof(graph) === 'object') {
					var rows =
						'rows' in graph && _typeof(graph.rows) === 'number' && graph.rows > 0
							? graph.rows
							: _DEFALUT.graph.rows;
					var width = [];

					if (isPrimitive(graph.width)) {
						width = [graph.width || _DEFALUT.graph.width];
					} else {
						width = isArray(graph.width) ? graph.width : [_DEFALUT.graph.width];
					}

					width.reverse();
					width.length = rows;
					return width.reverse();
				}
			},
			avatarProp: function avatarProp() {
				var avatar = this.avatar;

				if (_typeof(avatar) === 'boolean') {
					return _DEFALUT.avatar;
				}

				if (_typeof(avatar) === 'object') {
					var size = 'size' in avatar && oneOf(avatar.size, SIZE_LIST$2) ? avatar.size : _DEFALUT.avatar.size;
					var shape =
						'shape' in avatar && oneOf(avatar.shape, SHAPE_LIST$2) ? avatar.shape : _DEFALUT.avatar.shape;
					return {
						size: size,
						shape: shape
					};
				}
			},
			titleProp: function titleProp() {
				return _typeof(this.title) === 'boolean' ? _DEFALUT.titleWidth : maybeAddPx(this.title || 'auto');
			}
		},
		methods: {
			// 头像
			renderAvatar: function renderAvatar() {
				var list = [];
				var h = this.$createElement;
				var avatar = this.avatar,
					avatarProp = this.avatarProp;

				if (avatar) {
					list.push(
						h(
							'div',
							{
								class: ''.concat(CLASS_PREFIX$3, '-header')
							},
							[
								h('hy-avatar', {
									props: {
										size: avatarProp.size,
										shape: avatarProp.shape
									},
									class: ''.concat(CLASS_PREFIX$3, '-avatar')
								})
							]
						)
					);
				}

				return list;
			},
			renderTitle: function renderTitle() {
				var list = [];
				var h = this.$createElement;
				var title = this.title,
					titleProp = this.titleProp;

				if (title) {
					list.push(
						h('h3', {
							class: ''.concat(CLASS_PREFIX$3, '-title'),
							style: {
								width: titleProp
							}
						})
					);
				}

				return list;
			},
			renderRows: function renderRows() {
				var list = [];
				var rowProp = this.rowProp;
				var h = this.$createElement;

				for (var i = 0; i < rowProp.length; i++) {
					list.push(
						h('li', {
							style: {
								width: maybeAddPx(rowProp[i] || 'auto')
							}
						})
					);
				}

				return list;
			}
		},
		render: function render(h) {
			var _ref;

			var active = this.active,
				avatar = this.avatar,
				loading = this.loading; // body

			var bodyTpl = h(
				'div',
				{
					class: ''.concat(CLASS_PREFIX$3, '-content')
				},
				[
					this.renderTitle(),
					h(
						'ul',
						{
							class: ''.concat(CLASS_PREFIX$3, '-graph')
						},
						this.renderRows()
					)
				]
			); // 整体

			var defaultTpl = h(
				'div',
				{
					class: [
						CLASS_PREFIX$3,
						((_ref = {}),
						_defineProperty(_ref, ''.concat(CLASS_PREFIX$3, '-active'), active),
						_defineProperty(_ref, ''.concat(CLASS_PREFIX$3, '-has-avatar'), avatar),
						_ref)
					],
					attrs: {
						'aria-label': 'skeleton',
						rule: 'navigation'
					}
				},
				[this.renderAvatar(), bodyTpl]
			);

			try {
				return loading ? defaultTpl : h('span', this.$slots.default);
			} catch (e) {
				warn('component <skeleton> must contain elements');
				return null;
			}
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2018-05-17
	 * 描述：面包屑
	 */
	var CLASS_PREFIX$4 = 'hy-breadcrumb';
	var Breadcrumb = {
		name: 'hyBreadcrumb',
		props: {
			tag: {
				type: String,
				default: 'div'
			},
			separator: {
				type: String,
				default: '/'
			}
		},
		provide: function provide() {
			return {
				hyBreadcrumb: this
			};
		},
		render: function render(h) {
			return h(
				this.tag,
				{
					class: CLASS_PREFIX$4,
					attrs: {
						'aria-label': 'breadcrumb',
						rule: 'navigation'
					}
				},
				[this.$slots.default]
			);
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2018-05-17
	 * 描述：面包屑
	 */
	var CLASS_PREFIX$5 = 'hy-breadcrumb';
	var BreadcrumbItem = {
		name: 'hyBreadcrumbItem',
		props: {
			to: {
				type: [Object, String],
				default: ''
			}
		},
		data: function data() {
			return {
				separatorShow: true
			};
		},
		inject: ['hyBreadcrumb'],
		computed: {
			separator: function separator() {
				return this.hyBreadcrumb.separator;
			}
		},
		methods: {
			renderBody: function renderBody() {
				var to = this.to;
				var h = this.$createElement;
				var tag = to ? 'router-link' : 'span';
				return h(
					tag,
					{
						class: [
							''.concat(CLASS_PREFIX$5, '-item__inner'),
							{
								'is-link': !!to
							}
						],
						props: {
							to: to,
							tag: 'a'
						}
					},
					this.$slots.default
				);
			}
		},
		render: function render(h) {
			var separator = this.separator;
			return h(
				'span',
				{
					class: ''.concat(CLASS_PREFIX$5, '-item__panel')
				},
				[
					this.renderBody(),
					h(
						'span',
						{
							class: ''.concat(CLASS_PREFIX$5, '-item__separator')
						},
						separator
					)
				]
			);
		}
	};

	var components = [Icon, Affix, Avatar, Button, Skeleton, Breadcrumb, BreadcrumbItem];

	var install = function install(Vue) {
		if (install.installed) return;
		install.installed = true;
		components.forEach(function(item) {
			Vue.component(item.name, item);
		});
	}; // window 部分

	if (typeof window !== 'undefined' && window.Vue) {
		install(window.Vue);
	}

	var index = _objectSpread2(
		{
			install: install
		},
		components
	);

	return index;
})();
//# sourceMappingURL=hyui.min.js.map
