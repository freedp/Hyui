/*!
 * hy-ui v0.0.4
 * @license (c) 2018-2020 Hyhello
 * Released under the MIT License.
 */
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var HyUi = (function (Vue) {
  'use strict';

  Vue = Vue && Object.prototype.hasOwnProperty.call(Vue, 'default') ? Vue['default'] : Vue;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  /* @flow */

  /**
   * 作者：Hyhello
   * 时间：2019-06-23
   * 描述：常量
   */
  var class2type = Object.freeze({});
  var _toString = class2type.toString;
  var _hasOwn = class2type.hasOwnProperty;
  var _assign = Object.assign;
  var noop = function noop() {};

  var isElement = function isElement(el) {
    return _typeof(el) === 'object' && el.nodeType === 1;
  }; // oneOf

  var oneOf = function oneOf(target, list) {
    return list.some(function (item) {
      return item === target;
    });
  }; // 继承

  var _extend = function _extend(target, resource) {
    try {
      return _assign.apply(Object, [target, resource]);
    } catch (error) {
      for (var i in resource) {
        if (_hasOwn.call(resource, i)) {
          target[i] = resource[i];
        }
      }

      return target;
    }
  }; // 定义属性

  var _typeof$1 = function _typeof(type) {
    return _toString.call(type).slice(8, -1).toLowerCase();
  }; // 判断是否是基本类型

  var isPrimitive = function isPrimitive(n) {
    return n !== Object(n);
  }; // 判断是否是数组

  var isArray = Array.isArray || function (n) {
    return n instanceof Array;
  }; // 是否是window

  var isWindow = function isWindow(target) {
    return target != null && target === target.window;
  };
  var isObject = function isObject(target) {
    return target !== null && _typeof(target) === 'object';
  };
  var isFunction = function isFunction(target) {
    return typeof target === 'function' && target instanceof Function;
  };
  var isPromise = function isPromise(target) {
    // 初始promise 或 promise.then返回的，故target有可能是function
    return target && (isObject(target) || isFunction(target)) && _typeof(isFunction(target.then));
  }; // 是否添加px

  var maybeAddPx = function maybeAddPx(n) {
    // eslint-disable-next-line no-restricted-globals
    return isNaN(+n) ? n : "".concat(n, "px");
  }; // likeArray

  var getDisplay = function getDisplay(el) {
    var display = document.defaultView.getComputedStyle(el, false).getPropertyValue('display');
    return display;
  }; // 获取元素的rect

  var getTargetRect = function getTargetRect(el) {
    return el !== window ? el.getBoundingClientRect() : {
      top: 0,
      bottom: window.innerHeight
    };
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：tag
   */
  var CLASS_PREFIX = 'hy-tag';
  var _DEFAULT = {
    size: ['large', 'medium', 'small'],
    type: ['success', 'warning', 'danger', 'info', '']
  };
  var Tag = {
    name: 'hyTag',
    props: {
      type: {
        type: String,
        default: ''
      },
      closable: {
        type: Boolean,
        default: false
      },
      process: {
        type: Boolean,
        default: false
      },
      dot: {
        type: Boolean,
        default: false
      },
      border: {
        type: Boolean,
        default: false
      },
      color: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'large',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT.size);
        }
      }
    },
    computed: {
      classes: function classes() {
        var list = [CLASS_PREFIX];
        var type = this.type,
            border = this.border,
            dot = this.dot,
            process = this.process;
        list.push(["".concat(CLASS_PREFIX, "--").concat(type || 'default')]);

        if (process) {
          list.push("".concat(CLASS_PREFIX, "--processing"));
        }

        if (border) {
          list.push("".concat(CLASS_PREFIX, "--border"));
        }

        if (dot) {
          list.push("".concat(CLASS_PREFIX, "--dot"));
        }

        return list;
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes;
      return h("span", {
        "class": classes
      }, [this.$slots.default, h("i", {
        "class": ["".concat(CLASS_PREFIX, "__closed")]
      })]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：rate
   */
  var CLASS_PREFIX$1 = 'hy-rate';
  console.log(oneOf, CLASS_PREFIX$1);
  var Rate = {
    name: 'hyRate',
    props: {
      tag: {}
    },
    render: function render() {
      var h = arguments[0];
      return h("div", ["1231"]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：card
   */
  var CLASS_PREFIX$2 = 'hy-card';
  var _DEFAULT$1 = {
    shadow: ['always', 'hover', 'never']
  };
  var Card = {
    name: 'hyCard',
    props: {
      header: {
        type: [String, Boolean, Number],
        default: ''
      },
      shadow: {
        type: [String],
        default: 'hover',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$1.shadow);
        }
      },
      headerStyle: {
        type: [Object],
        default: function _default() {}
      },
      bodyStyle: {
        type: [Object],
        default: function _default() {}
      }
    },
    computed: {
      classes: function classes() {
        var shadow = this.shadow;
        var list = [CLASS_PREFIX$2];

        if (shadow) {
          list.push("".concat(CLASS_PREFIX$2, "--").concat(shadow));
        }

        return list;
      }
    },
    render: function render() {
      var h = arguments[0];
      var list = [];
      var classes = this.classes,
          header = this.header,
          bodyStyle = this.bodyStyle,
          headerStyle = this.headerStyle,
          $slots = this.$slots; // headerTpl

      if (header || $slots.header) {
        list.push(h("div", {
          "class": ["".concat(CLASS_PREFIX$2, "-header")],
          "style": headerStyle
        }, [$slots.header || header]));
      } // bodyTpl


      list.push(h("div", {
        "class": ["".concat(CLASS_PREFIX$2, "-body")],
        "style": bodyStyle
      }, [$slots.default]));
      return h("div", {
        "class": classes
      }, [].concat(list));
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：icon
   */
  var CLASS_PREFIX$3 = 'hy-icon';
  var Icon = {
    name: 'hyIcon',
    props: {
      type: {
        type: String,
        default: ''
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("i", {
        "class": ["".concat(CLASS_PREFIX$3, "-").concat(this.type)]
      });
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-07-13
   * 描述：debug
   */
  var warn = function warn(msg) {
    console.error("[hy-ui warn]\uFF1A".concat(msg));
  };

  var wHeight = window.innerHeight;

  var getOffset = function getOffset(el, target) {
    var bool = isWindow(target);
    return getTargetRect(el).top - (bool ? 0 : getTargetRect(target).top);
  };

  var Affix = {
    name: 'Affix',
    props: {
      target: {
        type: String,
        default: ''
      },
      offsetTop: {
        type: Number,
        default: 100
      },
      offsetBottom: {
        type: Number,
        default: 0
      }
    },
    data: function data() {
      return {
        isActive: false,
        fixStyle: {},
        styles: {}
      };
    },
    computed: {
      offsetType: function offsetType() {
        var offsetBottom = this.offsetBottom;
        return offsetBottom > 0 ? 'bottom' : 'top';
      }
    },
    render: function render(h) {
      try {
        var isActive = this.isActive,
            styles = this.styles,
            fixStyle = this.fixStyle;
        var childList = this.$slots.default;
        var vNodeList = [childList];

        if (!childList || !childList[0].tag) {
          throw new Error('component <affix> must contain element');
        }

        if (childList.length > 1) {
          throw new Error('component <affix> must single element');
        }

        if (isActive) {
          vNodeList = [h('div', {
            style: styles
          }), h('div', {
            style: fixStyle
          }, vNodeList)];
        }

        return h('span', {
          style: {
            outline: 'none'
          },
          attrs: {
            rule: 'affix',
            tabIndex: -1
          }
        }, vNodeList);
      } catch (e) {
        warn(e.message);
        return null;
      }
    },
    mounted: function mounted() {
      this.init();
    },
    methods: {
      init: function init() {
        var _this = this;

        this.$nextTick(function () {
          if (!isElement(_this.$el)) return;
          var vNode = _this.$slots.default[0].elm;
          var rect = getTargetRect(vNode);
          _this.styles = {
            display: getDisplay(vNode),
            width: "".concat(rect.width, "px"),
            height: "".concat(rect.height, "px"),
            userSelect: 'none'
          };
          _this.fixStyle = _objectSpread2(_objectSpread2({}, _this.styles), {}, {
            position: 'fixed',
            left: "".concat(rect.left, "px")
          }); // 目前只支持window

          _this.elm = window || _this.target ? document.querySelector(_this.target) : window;

          _this.elm.addEventListener('scroll', _this.updatePos, false);
        });
      },
      updatePos: function updatePos() {
        var $el = this.$el,
            elm = this.elm,
            offsetTop = this.offsetTop,
            offsetBottom = this.offsetBottom,
            offsetType = this.offsetType;
        var offset = getOffset($el, elm);

        if (offsetType === 'top') {
          this.isActive = offset <= offsetTop;
          this.fixStyle.top = this.isActive ? "".concat(offsetTop, "px") : 0;
        } else if (offsetType === 'bottom') {
          this.isActive = offset <= wHeight - offsetBottom;
          this.fixStyle.top = this.isActive ? "".concat(wHeight - offsetBottom, "px") : 0;
        }

        this.$emit('change', this.isActive, offset);
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.elm.removeEventListener('scroll', this.updatePos, false);
      this.elm = null;
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2020-01-10
   * 描述：头部
   */
  var CLASS_PREFIX$4 = 'hy-avatar';
  var _DEFAULT$2 = {
    shape: ['circle', 'square'],
    size: ['large', 'medium', 'small']
  };
  var Avatar = {
    name: 'hyAvatar',
    components: {
      hyIcon: Icon
    },
    props: {
      shape: {
        type: String,
        default: 'circle',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$2.shape);
        }
      },
      size: {
        type: [String, Number],
        default: 'large',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$2.size) || _typeof$1(val) === 'number';
        }
      },
      icon: {
        type: String,
        default: ''
      },
      src: {
        type: String,
        default: ''
      },
      srcSet: {
        type: String,
        default: ''
      },
      alt: {
        type: String,
        default: ''
      },
      onError: {
        type: Function,
        default: noop
      }
    },
    data: function data() {
      return {
        isImgExist: true
      };
    },
    computed: {
      classes: function classes() {
        var list = [CLASS_PREFIX$4];
        var shape = this.shape,
            size = this.size,
            icon = this.icon,
            src = this.src;

        if (size && _typeof$1(size) === 'string') {
          list.push("".concat(CLASS_PREFIX$4, "--").concat(size));
        }

        if (shape) {
          list.push("".concat(CLASS_PREFIX$4, "--").concat(shape));
        }

        if (src) {
          list.push("".concat(CLASS_PREFIX$4, "--image"));
        }

        if (icon) {
          list.push("".concat(CLASS_PREFIX$4, "--icon"));
        }

        return list;
      },
      styles: function styles() {
        var size = this.size;

        if (_typeof$1(size) === 'number') {
          return {
            width: maybeAddPx(size),
            height: maybeAddPx(size),
            lineHeight: maybeAddPx(size)
          };
        }

        return {};
      }
    },
    methods: {
      handlerError: function handlerError() {
        var onError = this.onError;
        var flag = onError ? onError() : undefined;

        if (flag !== false) {
          this.isImgExist = false;
        }
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes,
          styles = this.styles,
          icon = this.icon,
          src = this.src,
          alt = this.alt,
          srcSet = this.srcSet,
          isImgExist = this.isImgExist,
          handlerError = this.handlerError;
      var bodyTpl = this.$slot.default;

      if (isImgExist && src) {
        bodyTpl = h("img", {
          "on": {
            "error": handlerError
          },
          "attrs": {
            "src": src,
            "alt": alt,
            "srcSet": srcSet
          }
        });
      } else if (icon) {
        bodyTpl = h("hy-icon", {
          "attrs": {
            "type": icon
          }
        });
      }

      return h("span", {
        "class": classes,
        "style": styles
      }, [bodyTpl]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：button
   */
  var CLASS_PREFIX$5 = 'hy-button';
  var _DEFAULT$3 = {
    delay: 200,
    // ms 毫秒
    size: ['large', 'medium', 'small'],
    shape: ['normal', 'round', 'circle'],
    nativeType: ['button', 'submit', 'reset'],
    type: ['primary', 'success', 'warning', 'danger', 'info', 'text', '']
  };
  var Button = {
    name: 'hyButton',
    components: {
      hyIcon: Icon
    },
    props: {
      loading: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      icon: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'large',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$3.size);
        }
      },
      shape: {
        type: String,
        default: 'normal',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$3.shape);
        }
      },
      type: {
        type: String,
        default: '',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$3.type);
        }
      },
      nativeType: {
        type: String,
        default: 'button',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$3.nativeType);
        }
      }
    },
    computed: {
      classes: function classes() {
        var list = [CLASS_PREFIX$5];
        var size = this.size,
            shape = this.shape,
            type = this.type,
            disabled = this.disabled;
        list.push("".concat(CLASS_PREFIX$5, "--").concat(type || 'defulat'));

        if (size) {
          list.push("".concat(CLASS_PREFIX$5, "--").concat(size));
        }

        if (shape) {
          list.push("".concat(CLASS_PREFIX$5, "--").concat(shape));
        }

        if (disabled) {
          list.push("".concat(CLASS_PREFIX$5, "--disabled"));
        }

        return list;
      }
    },
    methods: {
      handlerClick: function handlerClick(e) {
        if (this.disabled) return;
        this.$emit('click', e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes,
          nativeType = this.nativeType,
          handlerClick = this.handlerClick,
          loading = this.loading,
          icon = this.icon;
      var list = [];

      if (loading || icon) {
        list.push(h("hy-icon", {
          "attrs": {
            "type": icon && !loading ? icon : 'refresh'
          }
        }));
      }

      if (this.$slots.default) {
        list.push(h("span", [this.$slots.default]));
      }

      return h("button", {
        "class": classes,
        "attrs": {
          "aria-label": "button",
          "rule": "button",
          "type": nativeType
        },
        "on": {
          "click": handlerClick
        }
      }, [].concat(list));
    }
  };

  var CLASS_PREFIX$6 = 'hy-switch';
  var _DEFAULT$4 = {
    position: ['outside', 'inside'],
    size: ['large', 'medium', 'small'],
    activeColor: '#2d8cf0',
    inactiveColor: '#cccccc'
  };
  var Switch = {
    name: 'hySwitch',
    props: {
      value: {
        type: [Boolean, String, Number],
        default: false
      },
      // 文字展现位置
      position: {
        type: [String],
        default: 'outside',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$4.position);
        }
      },
      size: {
        type: [String],
        default: 'large',
        validator: function validator(val) {
          return oneOf(val, _DEFAULT$4.size);
        }
      },
      disabled: {
        type: [Boolean],
        default: false
      },
      activeValue: {
        type: [Boolean, String, Number],
        default: true
      },
      inactiveValue: {
        type: [Boolean, String, Number],
        default: false
      },
      activeText: {
        type: [String],
        default: ''
      },
      inactiveText: {
        type: [String],
        default: ''
      },
      activeColor: {
        type: [String],
        default: ''
      },
      inactiveColor: {
        type: [String],
        default: ''
      },
      beforeChange: [Function] // 返回promise

    },
    data: function data() {
      return {
        loading: false
      };
    },
    computed: {
      classes: function classes() {
        var list = [CLASS_PREFIX$6];
        var size = this.size,
            disabled = this.disabled,
            loading = this.loading,
            currentValue = this.currentValue,
            activeValue = this.activeValue;

        if (size) {
          list.push("".concat(CLASS_PREFIX$6, "--").concat(size));
        }

        if (disabled) {
          list.push('is-disabled');
        }

        if (loading) {
          list.push('is-loading');
        }

        if (currentValue === activeValue) {
          list.push('is-checked');
        }

        return list;
      },
      styles: function styles() {
        var activeColor = this.activeColor,
            inactiveColor = this.inactiveColor,
            currentValue = this.currentValue,
            activeValue = this.activeValue;
        return {
          color: currentValue === activeValue ? activeColor || _DEFAULT$4.activeColor : inactiveColor || _DEFAULT$4.inactiveColor
        };
      },
      currentValue: {
        set: function set(val) {
          this.$emit('input', val);
          this.$emit('change', val);
        },
        get: function get() {
          return this.value;
        }
      }
    },
    methods: {
      next: function next(val) {
        var activeValue = this.activeValue,
            inactiveValue = this.inactiveValue;
        this.currentValue = val || (this.currentValue === activeValue ? inactiveValue : activeValue);
      },
      toggleChange: function toggleChange(val) {
        var _this = this;

        var next = this.next,
            loading = this.loading,
            disabled = this.disabled,
            position = this.position,
            activeValue = this.activeValue,
            inactiveValue = this.inactiveValue,
            currentValue = this.currentValue,
            beforeChange = this.beforeChange;
        if (disabled || loading) return;

        if (val && position === 'inside') {
          val = val === inactiveValue ? activeValue : inactiveValue;
        }

        if (val && currentValue === val) return;
        this.loading = true;

        if (beforeChange && isFunction(beforeChange)) {
          var pro = beforeChange();
          if (!isPromise(pro)) return warn('component <hy-switch> props [before-change] return is not Promise');
          pro.then(function () {
            next(val);
          }).finally(function () {
            _this.loading = false;
          });
        } else {
          next(val);
          this.loading = false;
        }
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var classes = this.classes,
          styles = this.styles,
          disabled = this.disabled,
          position = this.position,
          currentValue = this.currentValue,
          activeValue = this.activeValue,
          inactiveValue = this.inactiveValue;
      var checked = currentValue === activeValue;
      var renderCheckBox = h("input", {
        "attrs": {
          "type": "hidden",
          "disabled": disabled
        },
        "domProps": {
          "value": String(checked)
        },
        "class": ["".concat(CLASS_PREFIX$6, "__input")]
      });

      var renderBody = function renderBody() {
        var list = [];
        var activeText = _this2.activeText,
            toggleChange = _this2.toggleChange,
            inactiveText = _this2.inactiveText;
        var _this2$$slots = _this2.$slots,
            active = _this2$$slots.active,
            inactive = _this2$$slots.inactive;
        list.push(h("span", {
          "class": ["".concat(CLASS_PREFIX$6, "__inner")],
          "style": styles,
          "on": {
            "click": toggleChange.bind(_this2, undefined)
          }
        }));

        if (inactiveText && (position === 'outside' || position === 'inside' && !checked)) {
          var method = position === 'inside' ? 'push' : 'unshift';
          list[method](h("span", {
            "class": ["".concat(CLASS_PREFIX$6, "__text is-left")],
            "on": {
              "click": toggleChange.bind(_this2, inactiveValue)
            }
          }, [inactive || h("span", [inactiveText])]));
        }

        if (activeText && (position === 'outside' || position === 'inside' && checked)) {
          list.push(h("span", {
            "class": ["".concat(CLASS_PREFIX$6, "__text is-right")],
            "on": {
              "click": toggleChange.bind(_this2, activeValue)
            }
          }, [active || h("span", [activeText])]));
        }

        return list;
      };

      return h("span", {
        "class": classes,
        "attrs": {
          "tab-index": "-1",
          "rule": "switch",
          "aria-label": "switch",
          "aria-checked": String(checked),
          "aria-position": position
        }
      }, [renderCheckBox].concat(_toConsumableArray(renderBody())));
    }
  };

  var isDate = function isDate(date) {
    return date instanceof Date && _typeof$1(date) === 'date';
  };
  var rangeArr = function rangeArr(n) {
    return _toConsumableArray(Array(n).keys());
  }; // 是否是闰年

  var isLeap = function isLeap(year) {
    // eslint-disable-next-line no-nested-ternary
    return year % 100 === 0 ? year % 400 === 0 ? 1 : 0 : year % 4 === 0 ? 1 : 0;
  };
  var mdays = function mdays(date) {
    if (!isDate(date)) return;
    var da = new Date(date.getTime());
    var totalDays = [31, 28 + isLeap(da.getFullYear()), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return totalDays[da.getMonth()];
  }; // 获取月天数

  var getDaysByMonth = function getDaysByMonth(date) {
    return rangeArr(mdays(date)).map(function (item, i) {
      return i + 1;
    });
  }; // 获取这个月得第一天星期几

  var getFirstDayByMonth = function getFirstDayByMonth(date) {
    if (!isDate(date)) return;
    var da = new Date(date.getTime());
    da.setDate(1);
    return da.getDay();
  }; // 获取上月有多少天

  var getPrevMonthLastDays = function getPrevMonthLastDays(date) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (!isDate(date)) return;
    if (offset <= 0) return [];
    var da = new Date(date.getTime());
    da.setDate(0);
    var lastDay = da.getDate();
    return rangeArr(offset).map(function (item, i) {
      return lastDay - (offset - i - 1);
    });
  };

  /**
   * 作者：Hyhello
   * 时间：2020-05-21
   * 描述：配置
   */
  var ROW_SPAN = 6;
  var CLASS_PREFIX$7 = 'hy-calendar'; // TEXT DEFAULT

  var TEXT_MAP = [{
    label: '上个月',
    alias: 'prev'
  }, {
    label: '今日',
    alias: 'current'
  }, {
    label: '下个月',
    alias: 'next'
  }]; // THeader

  var THEADER = ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];

  var _slice = [].slice;
  var Ttable = {
    name: 'Ttable',
    data: function data() {
      return {
        currentDate: new Date()
      };
    },
    methods: {
      toNestedArr: function toNestedArr(days) {
        var cols = this.cols,
            nums = this.nums;
        return rangeArr(nums / cols).map(function (_, i) {
          return _slice.call(days, i * cols, (i + 1) * cols);
        });
      },
      setCellStyle: function setCellStyle(item) {
        var list = [item.type];

        if (item.type === 'current') {
          list.push('is-today');
        }

        return list;
      },
      handleChoose: function handleChoose(item) {
        console.log(item);
      }
    },
    computed: {
      cols: function cols() {
        return THEADER.length;
      },
      nums: function nums() {
        var cols = this.cols;
        return ROW_SPAN * cols;
      },
      firstDayOfMonth: function firstDayOfMonth() {
        var currentDate = this.currentDate;
        return getFirstDayByMonth(currentDate);
      },
      days: function days() {
        var nums = this.nums,
            currentDate = this.currentDate,
            firstDayOfMonth = this.firstDayOfMonth,
            toNestedArr = this.toNestedArr;
        var lastMonthDays = getPrevMonthLastDays(currentDate, firstDayOfMonth).map(function (day) {
          return {
            type: 'prev',
            value: day
          };
        });
        var nowMonthDays = getDaysByMonth(currentDate).map(function (day) {
          return {
            type: 'current',
            value: day
          };
        });
        var nextMonthDays = rangeArr(nums - lastMonthDays.length - nowMonthDays.length).map(function (_, i) {
          return {
            type: 'next',
            value: i + 1
          };
        });
        return toNestedArr([].concat(_toConsumableArray(lastMonthDays), _toConsumableArray(nowMonthDays), _toConsumableArray(nextMonthDays)));
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var days = this.days,
          handleChoose = this.handleChoose,
          setCellStyle = this.setCellStyle;
      var thead = h("thead", [THEADER.map(function (day, key) {
        return h("th", {
          "key": key
        }, [day]);
      })]);
      return h("table", {
        "attrs": {
          "cellspacing": "0",
          "cellpadding": "0"
        },
        "class": "".concat(CLASS_PREFIX$7, "-table")
      }, [thead, h("tbody", [days.map(function (day, n) {
        return h("tr", {
          "key": n,
          "class": "".concat(CLASS_PREFIX$7, "-table__row")
        }, [day.map(function (cell, m) {
          return h("td", {
            "key": m,
            "class": setCellStyle(cell)
          }, [h("div", {
            "class": "".concat(CLASS_PREFIX$7, "-day"),
            "on": {
              "click": handleChoose.bind(_this, cell)
            }
          }, [cell.value])]);
        })]);
      })])]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2020-05-21
   * 描述：日历
   */
  var Calendar = {
    name: 'hyCalendar',
    components: {
      Ttable: Ttable
    },
    props: {
      value: {
        type: [Date, String, Number],
        default: ''
      }
    },
    data: function data() {
      return {
        now: new Date()
      };
    },
    methods: {
      handleTool: function handleTool(item) {
        console.log(item);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var handleTool = this.handleTool;
      return h("div", {
        "class": CLASS_PREFIX$7,
        "attrs": {
          "aria-label": "calendar"
        }
      }, [h("div", {
        "class": "".concat(CLASS_PREFIX$7, "__header")
      }, [h("div", {
        "class": "".concat(CLASS_PREFIX$7, "__title")
      }, ["2020 \u5E74 5 \u6708"]), TEXT_MAP.map(function (item, key) {
        return h("button", {
          "attrs": {
            "size": "mini",
            "plain": true
          },
          "key": key,
          "on": {
            "click": handleTool.bind(_this, item)
          }
        }, [item.label]);
      })]), h("div", {
        "class": "".concat(CLASS_PREFIX$7, "__body")
      }, [h(Ttable)])]);
    }
  };

  var CLASS_PREFIX$8 = 'hy-skeleton'; // 默认配置

  var _DEFALUT = {
    titleWidth: '38%',
    //
    graph: {
      rows: 3,
      // number
      width: '61%' // number | string | Array<number | string>

    },
    avatar: {
      size: 'small',
      //  large / medium / small
      shape: 'circle' // 'circle', 'square'

    },
    shape: ['circle', 'square'],
    size: ['large', 'medium', 'small']
  };
  var Skeleton = {
    name: 'hySkeleton',
    components: {
      hyAvatar: Avatar
    },
    props: {
      loading: {
        type: Boolean,
        default: false
      },
      // 是否展示标题占位符
      title: {
        type: [Boolean, String, Number],
        default: true
      },
      // 是否显示头像
      avatar: {
        type: [Boolean, Object],
        default: false
      },
      // 是否显示动画
      active: {
        type: Boolean,
        default: false
      },
      // 是否显示段落占位图
      graph: {
        type: [Boolean, Object],
        default: false
      }
    },
    computed: {
      rows: function rows() {
        var graph = this.graph;

        if (_typeof$1(graph) === 'boolean') {
          return graph ? ['', '', _DEFALUT.graph.width] : [];
        }

        if (_typeof$1(graph) === 'object') {
          var rows = 'rows' in graph && _typeof$1(graph.rows) === 'number' && graph.rows > 0 ? graph.rows : _DEFALUT.graph.rows;
          var width = [];

          if (isPrimitive(graph.width)) {
            width = [graph.width || _DEFALUT.graph.width];
          } else {
            width = isArray(graph.width) ? graph.width : [_DEFALUT.graph.width];
          }

          width.reverse();
          width.length = rows;
          return width.reverse();
        }

        return [];
      },
      avatarProp: function avatarProp() {
        var avatar = this.avatar;

        if (_typeof$1(avatar) === 'boolean') {
          return _DEFALUT.avatar;
        }

        if (_typeof$1(avatar) === 'object') {
          var size = 'size' in avatar && oneOf(avatar.size, _DEFALUT.size) ? avatar.size : _DEFALUT.avatar.size;
          var shape = 'shape' in avatar && oneOf(avatar.shape, _DEFALUT.shape) ? avatar.shape : _DEFALUT.avatar.shape;
          return {
            size: size,
            shape: shape
          };
        }

        return {};
      },
      titleProp: function titleProp() {
        return _typeof$1(this.title) === 'boolean' ? _DEFALUT.titleWidth : maybeAddPx(this.title || 'auto');
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var active = this.active,
          avatar = this.avatar,
          loading = this.loading,
          rows = this.rows,
          title = this.title,
          titleProp = this.titleProp,
          avatarProp = this.avatarProp; // body

      var bodyTpl = h("div", {
        "class": ["".concat(CLASS_PREFIX$8, "-content")]
      }, [title ? h("h3", {
        "class": ["".concat(CLASS_PREFIX$8, "-title")],
        "style": {
          width: titleProp
        }
      }) : null, h("ul", {
        "class": ["".concat(CLASS_PREFIX$8, "-graph")]
      }, [rows.map(function (row, key) {
        return h("li", {
          "key": key,
          "style": {
            width: maybeAddPx(row || 'auto')
          }
        });
      })])]); // 整体

      var defaultTpl = h("div", {
        "class": [CLASS_PREFIX$8, (_ref = {}, _defineProperty(_ref, "".concat(CLASS_PREFIX$8, "-active"), active), _defineProperty(_ref, "".concat(CLASS_PREFIX$8, "-has-avatar"), avatar), _ref)],
        "attrs": {
          "tab-index": "-1",
          "aria-label": "skeleton",
          "rule": "navigation"
        }
      }, [avatar ? h("div", {
        "class": ["".concat(CLASS_PREFIX$8, "-header")]
      }, [h("hy-avatar", {
        "class": ["".concat(CLASS_PREFIX$8, "-avatar")],
        "attrs": {
          "size": avatarProp.size,
          "shape": avatarProp.shape
        }
      })]) : null, bodyTpl]);

      try {
        return loading ? defaultTpl : h("span", [this.$slots.default]);
      } catch (e) {
        return null;
      }
    }
  };

  function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}var normalMerge=["attrs","props","domProps"],toArrayMerge=["class","style","directives"],functionalMerge=["on","nativeOn"],mergeJsxProps=function(a){return a.reduce(function(c,a){for(var b in a)if(!c[b])c[b]=a[b];else if(-1!==normalMerge.indexOf(b))c[b]=_extends({},c[b],a[b]);else if(-1!==toArrayMerge.indexOf(b)){var d=c[b]instanceof Array?c[b]:[c[b]],e=a[b]instanceof Array?a[b]:[a[b]];c[b]=d.concat(e);}else if(-1!==functionalMerge.indexOf(b)){for(var f in a[b])if(c[b][f]){var g=c[b][f]instanceof Array?c[b][f]:[c[b][f]],h=a[b][f]instanceof Array?a[b][f]:[a[b][f]];c[b][f]=g.concat(h);}else c[b][f]=a[b][f];}else if("hook"==b)for(var i in a[b])c[b][i]=c[b][i]?mergeFn(c[b][i],a[b][i]):a[b][i];else c[b]=a[b];return c},{})},mergeFn=function(a,b){return function(){a&&a.apply(this,arguments),b&&b.apply(this,arguments);}};var helper=mergeJsxProps;

  var CLASS_PREFIX$9 = 'hy-loadingbar';
  var LoadingBarTpl = {
    name: 'hyLoadingBar',
    data: function data() {
      return {
        color: '',
        percent: 0,
        // 0 ~ 1
        isAppend: false,
        visible: false,
        started: false,
        status: '',
        autoIncrement: true
      };
    },
    methods: {
      _inc: function _inc() {
        var percent = this.percent;
        var rnd = 0;

        if (percent >= 0 && percent < 0.25) {
          rnd = (Math.random() * 3 + 3) / 100;
        } else if (percent >= 0.25 && percent < 0.65) {
          rnd = Math.random() * 3 / 100;
        } else if (percent >= 0.65 && percent < 0.9) {
          rnd = Math.random() * 2 / 100;
        } else if (percent >= 0.9 && percent < 0.99) {
          rnd = 0.005;
        } else {
          rnd = 0;
        }

        this._set(percent + rnd);
      },
      _set: function _set(n) {
        if (!this.started) return;
        if (this.percent >= 1) return this.closed();
        this.percent = n;

        if (this.autoIncrement) {
          window.clearTimeout(this.timer);
          this.timer = window.setTimeout(this._inc, 250);
        }
      },
      append: function append() {
        if (!this.isAppend) {
          document.body.appendChild(this.$el);
          this.isAppend = true;
        }
      },
      start: function start() {
        if (this.started) return;
        this.append();
        this.started = true;
        this.visible = true;

        this._set(0);
      },
      update: function update(n) {
        if (_typeof$1(n) !== 'number') return warn('plugin <$LoadingBar> methods update arguments muse be a number');

        if (!this.started) {
          this.append();
          this.started = true;
          this.visible = true;
        }

        this.autoIncrement = false;

        this._set(n);
      },
      complete: function complete() {
        if (this.status) return;

        this._set(1);

        this.status = 'complete';
      },
      error: function error() {
        if (!this.started || this.status) return;
        this.color = 'red';

        this._set(1);

        this.status = 'error';
      },
      closed: function closed() {
        var _this = this;

        window.clearTimeout(this.completeTimer);
        window.completeTimer = window.setTimeout(function () {
          _this.visible = false;
        }, 500);
      },
      afterLeave: function afterLeave() {
        this.color = '';
        this.percent = 0;
        this.status = '';
        this.started = false;
        this.autoIncrement = true;
      }
    },
    beforeDestroy: function beforeDestroy() {
      document.body.removeChild(this.$el);
    },
    render: function render() {
      var h = arguments[0];
      var list = [];
      var color = this.color,
          percent = this.percent,
          visible = this.visible,
          afterLeave = this.afterLeave;
      list.push(h("div", {
        "class": ["".concat(CLASS_PREFIX$9, "-main")]
      }, [h("div", {
        "class": ["".concat(CLASS_PREFIX$9, "-main__inner")],
        "style": {
          width: "".concat(percent * 100, "%")
        }
      }, [h("div", {
        "class": ["".concat(CLASS_PREFIX$9, "-main__peg")]
      })])])); // <div id="loading-bar-spinner"></div>

      {
        list.push(h("div", {
          "class": ["".concat(CLASS_PREFIX$9, "-spinner")]
        }));
      }

      return h("transition", {
        "attrs": {
          "name": "fade"
        },
        "on": {
          "afterLeave": afterLeave
        }
      }, [h("div", helper([{
        "class": CLASS_PREFIX$9,
        "attrs": {
          "tab-index": "-1",
          "rule": "loading-bar"
        },
        "style": {
          color: color
        }
      }, {
        directives: [{
          name: 'show',
          value: visible
        }]
      }]), [].concat(list))]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2019-10-07
   * 描述：loadingBar
   */
  var TransfrLoading = Vue.extend(LoadingBarTpl); // 实体

  var instance = new TransfrLoading({
    data: {}
  }).$mount();
  var LoadingBar = {
    start: instance.start,
    complete: instance.complete,
    error: instance.error,
    update: instance.update
  };

  /**
   * 作者：Hyhello
   * 时间：2018-05-17
   * 描述：面包屑
   */
  var CLASS_PREFIX$a = 'hy-breadcrumb';
  var Breadcrumb = {
    name: 'hyBreadcrumb',
    props: {
      tag: {
        type: String,
        default: 'div'
      },
      separator: {
        type: String,
        default: '/'
      }
    },
    provide: function provide() {
      return {
        hyBreadcrumb: this
      };
    },
    render: function render() {
      var h = arguments[0];
      var tag = this.tag;
      return h(tag, {
        "class": CLASS_PREFIX$a,
        "attrs": {
          "aria-label": "breadcrumb",
          "rule": "navigation"
        }
      }, [this.$slots.default]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2018-05-17
   * 描述：面包屑
   */
  var CLASS_PREFIX$b = 'hy-breadcrumb';
  var BreadcrumbItem = {
    name: 'hyBreadcrumbItem',
    props: {
      to: {
        type: [Object, String],
        default: ''
      }
    },
    data: function data() {
      return {
        separatorShow: true
      };
    },
    inject: ['hyBreadcrumb'],
    computed: {
      separator: function separator() {
        return this.hyBreadcrumb.separator;
      }
    },
    render: function render() {
      var h = arguments[0];
      var to = this.to,
          separator = this.separator;
      var tag = to ? 'router-link' : 'span';
      return h("span", {
        "class": ["".concat(CLASS_PREFIX$b, "-item__panel")]
      }, [h(tag, {
        "class": ["".concat(CLASS_PREFIX$b, "-item__inner"), {
          'is-link': !!to
        }],
        "attrs": {
          "to": to,
          "tag": "a"
        }
      }, [this.$slots.default]), h("span", {
        "class": ["".concat(CLASS_PREFIX$b, "-item__separator")]
      }, [separator])]);
    }
  };

  /**
   * 作者：Hyhello
   * 时间：2020-05-13
   * 描述：hy-ui配置项
   */
  var _default = {
    zIndex: 2000 // 默认z-index

  };

  var plugins = [LoadingBar]; // 组件集合

  var components = [Tag, Icon, Rate, Card, Affix, Avatar, Button, Switch, Calendar, Skeleton, Breadcrumb, BreadcrumbItem];

  var install = function install(Vue) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (install.installed) return;
    install.installed = true;
    components.forEach(function (item) {
      Vue.component(item.name, item);
    }); // 插件

    Vue.prototype.$loadingBar = LoadingBar; // 配置项

    Vue.prototype.$HYUI = _extend(_default, options);
  }; // window 部分


  if (typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  var index = _objectSpread2(_objectSpread2({
    v: '0.0.4',
    install: install
  }, plugins), components);

  return index;

}(Vue));
//# sourceMappingURL=hyui.min.js.map
