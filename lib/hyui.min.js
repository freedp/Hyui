/*!
 * hy-ui v0.0.4
 * @license (c) 2018-2020 Hyhello
 * Released under the MIT License.
 */
(function(l, r) {
	if (l.getElementById('livereloadscript')) return;
	r = l.createElement('script');
	r.async = 1;
	r.src =
		'//' +
		(window.location.host || 'localhost').split(':')[0] +
		':35729/livereload.js?snipver=1';
	r.id = 'livereloadscript';
	l.head.appendChild(r);
})(window.document);
var HyUi = (function() {
	'use strict';

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, {
				value: value,
				enumerable: true,
				configurable: true,
				writable: true
			});
		} else {
			obj[key] = value;
		}

		return obj;
	}

	function ownKeys(object, enumerableOnly) {
		var keys = Object.keys(object);

		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			if (enumerableOnly)
				symbols = symbols.filter(function(sym) {
					return Object.getOwnPropertyDescriptor(
						object,
						sym
					).enumerable;
				});
			keys.push.apply(keys, symbols);
		}

		return keys;
	}

	function _objectSpread2(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i] != null ? arguments[i] : {};

			if (i % 2) {
				ownKeys(source, true).forEach(function(key) {
					_defineProperty(target, key, source[key]);
				});
			} else if (Object.getOwnPropertyDescriptors) {
				Object.defineProperties(
					target,
					Object.getOwnPropertyDescriptors(source)
				);
			} else {
				ownKeys(source).forEach(function(key) {
					Object.defineProperty(
						target,
						key,
						Object.getOwnPropertyDescriptor(source, key)
					);
				});
			}
		}

		return target;
	}

	/**
	 * 作者：Hyhello
	 * 时间：2019-10-07
	 * 描述：icon
	 */
	var Icon = {
		name: 'Icon',
		props: {
			type: {
				type: String,
				default: ''
			}
		},
		render: function render(h) {
			return h('span', {
				class: ['hy-icon-'.concat(this.type)]
			});
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-12-29
	 * 描述：affix
	 */
	var Affix = {
		name: 'Affix',
		props: {
			tag: {
				type: String,
				default: 'span'
			}
		},
		render: function render(h) {
			return h(this.tag, this.$slots.default);
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-06-23
	 * 描述：常量
	 */
	var class2type = Object.freeze({});
	var _toString = class2type.toString;
	var _hasOwn = class2type.hasOwnProperty;
	var noop = function noop() {};

	var _arguments = arguments;

	var oneOf = function oneOf(target, list) {
		return list.some(function(item) {
			return item === target;
		});
	}; // 继承

	var _typeof = function _typeof(type) {
		return _toString
			.call(type)
			.slice(8, -1)
			.toLowerCase();
	}; // 判断是否是基本类型

	var isPrimitive = function isPrimitive(n) {
		return n !== Object(n);
	}; // 判断是否是数组

	var isArray =
		Array.isArray ||
		function(n) {
			return n instanceof Array;
		}; // 是否添加px

	var maybeAddPx = function maybeAddPx(n) {
		// eslint-disable-next-line no-restricted-globals
		return isNaN(+n) ? n : ''.concat(n, 'px');
	}; // likeArray

	/**
	 * 作者：Hyhello
	 * 时间：2020-01-10
	 * 描述：头部
	 */
	var SIZE = ['large', 'small', 'default'];
	var SHAPE = ['circle', 'square'];
	var Avatar = {
		name: 'Avatar',
		props: {
			shape: {
				type: String,
				default: 'circle',
				validator: function validator(val) {
					return oneOf(val, SHAPE);
				}
			},
			size: {
				type: [String, Number],
				default: 'default',
				validator: function validator(val) {
					return oneOf(val, SIZE) || _typeof(val) === 'number';
				}
			},
			icon: {
				type: String,
				default: ''
			},
			src: {
				type: String,
				default: ''
			},
			alt: {
				type: String,
				default: ''
			},
			onError: {
				type: Function,
				default: noop
			}
		},
		render: function render(h) {
			return h('span');
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-07-13
	 * 描述：debug
	 */
	var warn = function warn(msg) {
		console.error('[hy-ui warn]\uFF1A'.concat(msg));
	};

	/**
	 * 作者：Hyhello
	 * 时间：2019-10-07
	 * 描述：骨架屏
	 */

	var _DEFALUT = {
		titleWidth: '38%',
		//
		graph: {
			rows: 3,
			// number
			width: '61%' // number | string | Array<number | string>
		},
		avatar: {
			size: 'small',
			//  large / medium / small
			shape: 'circle' // 'circle', 'square'
		}
	};
	var SHAPE$1 = ['circle', 'square'];
	var SIZE$1 = ['large', 'small'];
	var Skeleton = {
		name: 'Skeleton',
		props: {
			loading: {
				type: Boolean,
				default: false
			},
			// 是否展示标题占位符
			title: {
				type: [Boolean, String, Number],
				default: true
			},
			// 是否显示头像
			avatar: {
				type: [Boolean, Object],
				default: false
			},
			// 是否显示动画
			active: {
				type: Boolean,
				default: false
			},
			// 是否显示段落占位图
			graph: {
				type: [Boolean, Object],
				default: false
			}
		},
		computed: {
			rowProp: function rowProp() {
				var graph = this.graph;

				if (_typeof(graph) === 'boolean') {
					return graph ? ['', '', _DEFALUT.graph.width] : [];
				}

				if (_typeof(graph) === 'object') {
					var rows =
						'rows' in graph &&
						_typeof(graph.rows) === 'number' &&
						graph.rows > 0
							? graph.rows
							: _DEFALUT.graph.rows;
					var width = [];

					if (isPrimitive(graph.width)) {
						width = [graph.width || _DEFALUT.graph.width];
					} else {
						width = isArray(graph.width)
							? graph.width
							: [_DEFALUT.graph.width];
					}

					width.reverse();
					width.length = rows;
					return width.reverse();
				}
			},
			avatarProp: function avatarProp() {
				var avatar = this.avatar;

				if (_typeof(avatar) === 'boolean') {
					return _DEFALUT.avatar;
				}

				if (_typeof(avatar) === 'object') {
					var size =
						'size' in avatar && oneOf(avatar.size, SIZE$1)
							? avatar.size
							: _DEFALUT.avatar.size;
					var shape =
						'shape' in avatar && oneOf(avatar.shape, SHAPE$1)
							? avatar.shape
							: _DEFALUT.avatar.shape;
					return {
						size: size,
						shape: shape
					};
				}
			},
			titleProp: function titleProp() {
				return _typeof(this.title) === 'boolean'
					? _DEFALUT.titleWidth
					: maybeAddPx(this.title || 'auto');
			}
		},
		methods: {
			// 头像
			renderAvatar: function renderAvatar() {
				var list = [];
				var h = this.$createElement;
				var avatar = this.avatar,
					avatarProp = this.avatarProp;

				if (avatar) {
					list.push(
						h(
							'div',
							{
								class: 'hy-skeleton-header'
							},
							[
								h('span', {
									class: [
										'hy-skeleton-avatar',
										'hy-skeleton-avatar--'.concat(
											avatarProp.size
										),
										'hy-skeleton-avatar--'.concat(
											avatarProp.shape
										)
									]
								})
							]
						)
					);
				}

				return list;
			},
			renderTitle: function renderTitle() {
				var list = [];
				var h = this.$createElement;
				var title = this.title,
					titleProp = this.titleProp;

				if (title) {
					list.push(
						h('h3', {
							class: 'hy-skeleton-title',
							style: {
								width: titleProp
							}
						})
					);
				}

				return list;
			},
			renderRows: function renderRows() {
				var list = [];
				var rowProp = this.rowProp;
				var h = this.$createElement;

				for (var i = 0; i < rowProp.length; i++) {
					list.push(
						h('li', {
							style: {
								width: maybeAddPx(rowProp[i] || 'auto')
							}
						})
					);
				}

				return list;
			}
		},
		render: function render(h) {
			var active = this.active,
				avatar = this.avatar,
				loading = this.loading,
				renderRows = this.renderRows,
				renderAvatar = this.renderAvatar,
				renderTitle = this.renderTitle; // body

			var bodyTpl = h(
				'div',
				{
					class: 'hy-skeleton-content'
				},
				[
					renderTitle(),
					h(
						'ul',
						{
							class: 'hy-skeleton-graph'
						},
						renderRows()
					)
				]
			); // 整体

			var defaultTpl = h(
				'div',
				{
					class: [
						'hy-skeleton',
						{
							'hy-skeleton-active': active,
							'hy-skeleton-has-avatar': avatar
						}
					],
					attrs: {
						'aria-label': 'skeleton',
						rule: 'navigation'
					}
				},
				[renderAvatar(), bodyTpl]
			);

			try {
				return loading ? defaultTpl : h('span', this.$slots.default);
			} catch (e) {
				warn('component <skeleton> must contain elements');
				return null;
			}
		}
	};

	/**
	 * 作者：Hyhello
	 * 时间：2018-05-17
	 * 描述：面包屑
	 */
	var Breadcrumb = {
		name: 'Breadcrumb',
		props: {
			tag: {
				type: String,
				default: 'div'
			},
			separator: {
				type: String,
				default: '/'
			}
		},
		provide: function provide() {
			return {
				Breadcrumb: this
			};
		},
		render: function render(h) {
			return h(
				this.tag,
				{
					class: ['breadcrumb-panel'],
					attrs: {
						'aria-label': 'breadcrumb',
						rule: 'navigation'
					}
				},
				[this.$slots.default]
			);
		}
	};

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	var script = {
		name: 'BreadcrumbItem',
		props: {
			to: {
				type: [Object, String],
				default: ''
			}
		},
		data: function data() {
			return {
				separatorShow: true
			};
		},
		inject: ['Breadcrumb'],
		computed: {
			separator: function separator() {
				return this.Breadcrumb.separator;
			},
			linkTag: function linkTag() {
				return this.to ? 'a' : 'span';
			}
		}
	};

	function normalizeComponent(
		template,
		style,
		script,
		scopeId,
		isFunctionalTemplate,
		moduleIdentifier,
		/* server only */
		shadowMode,
		createInjector,
		createInjectorSSR,
		createInjectorShadow
	) {
		if (typeof shadowMode !== 'boolean') {
			createInjectorSSR = createInjector;
			createInjector = shadowMode;
			shadowMode = false;
		} // Vue.extend constructor export interop.

		var options = typeof script === 'function' ? script.options : script; // render functions

		if (template && template.render) {
			options.render = template.render;
			options.staticRenderFns = template.staticRenderFns;
			options._compiled = true; // functional template

			if (isFunctionalTemplate) {
				options.functional = true;
			}
		} // scopedId

		if (scopeId) {
			options._scopeId = scopeId;
		}

		var hook;

		if (moduleIdentifier) {
			// server build
			hook = function hook(context) {
				// 2.3 injection
				context =
					context || // cached call
					(this.$vnode && this.$vnode.ssrContext) || // stateful
					(this.parent &&
						this.parent.$vnode &&
						this.parent.$vnode.ssrContext); // functional
				// 2.2 with runInNewContext: true

				if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
					context = __VUE_SSR_CONTEXT__;
				} // inject component styles

				if (style) {
					style.call(this, createInjectorSSR(context));
				} // register component module identifier for async chunk inference

				if (context && context._registeredComponents) {
					context._registeredComponents.add(moduleIdentifier);
				}
			}; // used by ssr in case component is cached and beforeCreate
			// never gets called

			options._ssrRegister = hook;
		} else if (style) {
			hook = shadowMode
				? function() {
						style.call(
							this,
							createInjectorShadow(this.$root.$options.shadowRoot)
						);
				  }
				: function(context) {
						style.call(this, createInjector(context));
				  };
		}

		if (hook) {
			if (options.functional) {
				// register for functional component in vue file
				var originalRender = options.render;

				options.render = function renderWithStyleInjection(h, context) {
					hook.call(context);
					return originalRender(h, context);
				};
			} else {
				// inject component registration as beforeCreate hook
				var existing = options.beforeCreate;
				options.beforeCreate = existing
					? [].concat(existing, hook)
					: [hook];
			}
		}

		return script;
	}

	var normalizeComponent_1 = normalizeComponent;

	/* script */
	const __vue_script__ = script;
	/* template */
	var __vue_render__ = function() {
		var _vm = this;
		var _h = _vm.$createElement;
		var _c = _vm._self._c || _h;
		return _c(
			'span',
			{ staticClass: 'breadcrumb-item__panel' },
			[
				_c(
					'router-link',
					{
						staticClass: 'breadcrumb-item__inner',
						class: { 'is-link': !!this.to },
						attrs: { tag: _vm.linkTag, to: _vm.to }
					},
					[_vm._t('default')],
					2
				),
				_vm._v(' '),
				_c('span', { staticClass: 'breadcrumb-item__separator' }, [
					_vm._v(_vm._s(_vm.separator))
				])
			],
			1
		);
	};
	var __vue_staticRenderFns__ = [];
	__vue_render__._withStripped = true;

	/* style */
	const __vue_inject_styles__ = undefined;
	/* scoped */
	const __vue_scope_id__ = undefined;
	/* module identifier */
	const __vue_module_identifier__ = undefined;
	/* functional template */
	const __vue_is_functional_template__ = false;
	/* style inject */

	/* style inject SSR */

	var BreadcrumbItem = normalizeComponent_1(
		{ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
		__vue_inject_styles__,
		__vue_script__,
		__vue_scope_id__,
		__vue_is_functional_template__,
		__vue_module_identifier__,
		undefined,
		undefined
	);

	var components = [
		Icon,
		Affix,
		Avatar,
		Skeleton,
		Breadcrumb,
		BreadcrumbItem
	];

	var install = function install(Vue) {
		if (install.installed) return;
		install.installed = true;
		components.forEach(function(item) {
			Vue.component(item.name, item);
		});
	}; // window 部分

	if (typeof window !== 'undefined' && window.Vue) {
		install(window.Vue);
	}

	var index = _objectSpread2(
		{
			install: install
		},
		components
	);

	return index;
})();
//# sourceMappingURL=hyui.min.js.map
